{
	"info": {
		"_postman_id": "454ddd52-e358-4b99-b3af-40a91688fd27",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4753738"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "Create Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test('Validate structure of current response', function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"category\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            },\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrls\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"tags\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"name\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"            \"status\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"id\", \"category\", \"name\", \"photoUrls\", \"tags\", \"status\"]\r",
									"    };\r",
									"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Individual checks for response data\r",
									"pm.test(\"Pet id matches request data\", function () {  \r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"petId\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Pet category matches request data\", function () {\r",
									"    pm.expect(jsonData.category.id).to.eql(parseInt(pm.collectionVariables.get(\"categoryId\")));\r",
									"    pm.expect(jsonData.category.name).to.eql(pm.collectionVariables.get(\"categoryName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Pet name matches request data\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"petName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Pet photo URL matches request data\", function () {\r",
									"    pm.expect(jsonData.photoUrls[0]).to.eql(pm.collectionVariables.get(\"petPhotoUrl\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Pet tags matches request data\", function () {\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(parseInt(pm.collectionVariables.get(\"petTagId\")));\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(pm.collectionVariables.get(\"petTagName\")); \r",
									"});\r",
									"\r",
									"pm.test(\"Pet status matches request data\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"petId\", pm.variables.replaceIn('{{$timestamp}}'));\r",
									"pm.collectionVariables.set(\"categoryId\", Math.floor(Math.random() * 100));\r",
									"pm.collectionVariables.set(\"categoryName\", pm.variables.replaceIn('{{$randomLoremWord}}'));\r",
									"pm.collectionVariables.set(\"petName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.collectionVariables.set(\"petPhotoUrl\", pm.variables.replaceIn('{{$randomAnimalsImage}}'));\r",
									"pm.collectionVariables.set(\"petTagId\", Math.floor(Math.random() * 100));\r",
									"pm.collectionVariables.set(\"petTagName\", pm.variables.replaceIn('{{$randomProductAdjective}}'));\r",
									"\r",
									"pm.collectionVariables.set(\"status\", \"available\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{petId}},\r\n  \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"{{categoryName}}\"\r\n  },\r\n  \"name\": \"{{petName}}\",\r\n  \"photoUrls\": [\r\n    \"{{petPhotoUrl}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{petTagId}},\r\n      \"name\": \"{{petTagName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/pet"
					},
					"response": []
				},
				{
					"name": "Get Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches request data\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"petId\")));\r",
									"    pm.expect(jsonData.category.id).to.eql(parseInt(pm.collectionVariables.get(\"categoryId\")));\r",
									"    pm.expect(jsonData.category.name).to.eql(pm.collectionVariables.get(\"categoryName\"));\r",
									"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"petName\"));\r",
									"    pm.expect(jsonData.photoUrls[0]).to.eql(pm.collectionVariables.get(\"petPhotoUrl\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(parseInt(pm.collectionVariables.get(\"petTagId\")));\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(pm.collectionVariables.get(\"petTagName\"));    \r",
									"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
									"});\r",
									"\r",
									"pm.test('Check schema of current response', function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"category\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            },\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrls\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"tags\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"name\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"            \"status\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"name\", \"photoUrls\"]\r",
									"    };\r",
									"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/pet/{{petId}}"
					},
					"response": []
				},
				{
					"name": "Update Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Pet status updated\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
									"})\r",
									"\r",
									"pm.test(\"Response body didn't affect with status update\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"petId\")));\r",
									"    pm.expect(jsonData.category.id).to.eql(parseInt(pm.collectionVariables.get(\"categoryId\")));\r",
									"    pm.expect(jsonData.category.name).to.eql(pm.collectionVariables.get(\"categoryName\"));\r",
									"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"petName\"));\r",
									"    pm.expect(jsonData.photoUrls[0]).to.eql(pm.collectionVariables.get(\"petPhotoUrl\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(parseInt(pm.collectionVariables.get(\"petTagId\")));\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(pm.collectionVariables.get(\"petTagName\"));\r",
									"});\r",
									"\r",
									"pm.test('Check schema of current response', function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"category\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            },\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrls\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"tags\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"name\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"name\"]\r",
									"                }\r",
									"            },\r",
									"            \"status\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"id\", \"category\", \"name\", \"photoUrls\", \"tags\", \"status\"]\r",
									"    };\r",
									"    pm.expect(jsonData).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"status\", \"pending\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{petId}},\r\n  \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"{{categoryName}}\"\r\n  },\r\n  \"name\": \"{{petName}}\",\r\n  \"photoUrls\": [\r\n    \"{{petPhotoUrl}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{petTagId}},\r\n      \"name\": \"{{petTagName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/pet"
					},
					"response": []
				},
				{
					"name": "Delete Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(pm.collectionVariables.get(\"petId\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches request data\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"    pm.expect(jsonData.message).to.eql(pm.collectionVariables.get(\"petId\"));\r",
									"});\r",
									"\r",
									"pm.test('Check schema of current response', function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"code\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"type\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"message\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"code\", \"type\", \"message\"]\r",
									"    };\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/pet/{{petId}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "petName",
			"value": ""
		},
		{
			"key": "petId",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "categoryName",
			"value": ""
		},
		{
			"key": "petPhotoUrl",
			"value": ""
		},
		{
			"key": "petTagId",
			"value": ""
		},
		{
			"key": "petTagName",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}